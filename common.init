(* -*- Mode:caml; -*- *)

#load "fanTop.cma";;
#directory "+compiler-libs";;
#load "ocamlcommon.cma";;
#directory "_build/common";;
let fmt = std_formatter
let _loc = FLoc.ghost;;

let (|-) f g x = g (f x );;

let _ = begin
  Hashtbl.replace Toploop.directive_table "useo"
    (Toploop.Directive_string (fun file ->
      LibUtil.Ref.protect Toploop.parse_use_file Parse.use_file
        (fun _ -> ignore(Toploop.use_file Format.std_formatter file))))
end;;


let interface_of_string =
  Lexing.from_string |- Parse.interface;;
let implementation_of_string =
  Lexing.from_string |- Parse.implementation;;

let tg_dp () =
  Clflags.dump_parsetree := not !Clflags.dump_parsetree ;;
let pp =fprintf
let f = std_formatter;;
open Fan;;
open FanTop;;
open LibUtil;;


open FanUtil;;

open Gstructure;;

let print_ocaml_loc (fmt:formatter)(loc:Location.t) = ();;

open Fsyntax;;
let t e s = Fgram.parse_string e  s;;
let normal () = begin
  Toploop.parse_toplevel_phrase := Parse.toplevel_phrase
end;;

let print_tree f x  = pp f "@[%a@]@." Gprint.dump#tree x ;; 
let p_type_declaration  =  AstPrint.default#type_declaration;;


let env = !Toploop.toplevel_env;;

module O = Obj;;
open FAst;;



(* test dump *)
let t_dump s =  t stru s |> Ast2pt.stru;;
open PGrammar;;

(* #require "inspect";; *)
(* open Inspect;; *)
(* let view a= Dot.dump_to_file "test.dot"a;; *)
#install_printer print_tree;;
#install_printer Fgram.dump;;
#install_printer print_ocaml_loc;;
(* #install_printer p_type_declaration;; *)

#fan;;
